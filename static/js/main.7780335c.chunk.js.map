{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Nweet.js","components/NweetFactory.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["authService","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","getAuth","dbService","getFirestore","storageService","getStorage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","Nweet","nweetObj","isOwner","editing","setEditing","text","newNweet","setNewNweet","onDeleteClick","window","confirm","doc","id","delete","refFomURL","attachmentUrl","toggleEditing","update","autoFocus","src","class","faTrash","faPencilAlt","NweetFactory","userObj","nweet","setNweet","attachment","setAttachment","e","attachmentRef","ref","uid","uuidv4","uploadString","response","getDownloadURL","createdAt","Date","now","creatorId","collection","add","maxLength","for","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","opacity","backgroundImage","faTimes","Home","nweets","setNweets","useEffect","q","query","orderBy","unsubscribe","onSnapshot","querySnapshot","newArray","docs","map","marginTop","createId","refreshUser","navigate","useNavigate","displayName","newDisplayName","setNewDisplayName","updateProfile","signOut","push","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","AppRouter","isLoggedIn","maxWidth","width","margin","path","element","Profile","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","Boolean","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7780335c.chunk.js","sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { getAuth } from \"firebase/auth\";\r\nimport { getFirestore } from \"firebase/firestore\";\r\nimport { getStorage } from \"firebase/storage\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_ID,\r\n  appId: process.env.REACT_APP_APP_ID,\r\n};\r\n\r\nconst app = initializeApp(firebaseConfig);\r\nexport const authService = getAuth();\r\nexport const dbService = getFirestore();\r\nexport const storageService = getStorage();\r\nexport default app;\r\n","import { authService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst AuthForm = () => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [newAccount, setNewAccount] = useState(true);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { name, value },\r\n    } = event;\r\n    if (name === \"email\") {\r\n      setEmail(value);\r\n    } else if (name === \"password\") {\r\n      setPassword(value);\r\n    }\r\n  };\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      let data;\r\n      if (newAccount) {\r\n        data = await authService.createUserWithEmailAndPassword(\r\n          email,\r\n          password\r\n        );\r\n      } else {\r\n        data = await authService.signInWithEmailAndPassword(email, password);\r\n      }\r\n      console.log(data);\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  const toggleAccount = () => setNewAccount((prev) => !prev); //newAccount의 이전 값을 가져와서 그 값에 반대되는 것을 리턴한다.\r\n  return (\r\n    <>\r\n      <form onSubmit={onSubmit} className=\"container\">\r\n        <input\r\n          name=\"email\"\r\n          type=\"email\"\r\n          placeholder=\"Email\"\r\n          required\r\n          value={email}\r\n          onChange={onChange}\r\n          className=\"authInput\"\r\n        />\r\n        <input\r\n          name=\"password\"\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          required\r\n          value={password} //input값들을 가져다 쓰기위해 value 설정해줌\r\n          className=\"authInput\"\r\n          onChange={onChange}\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          className=\"authInput authSubmit\"\r\n          value={newAccount ? \"Create Account\" : \"Sign In\"}\r\n        />\r\n        {error && <span className=\"authError\">{error}</span>}\r\n      </form>\r\n      <span onClick={toggleAccount} className=\"authSwitch\">\r\n        {newAccount ? \"Sign In\" : \"Create Account\"}\r\n      </span>{\" \"}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","import React from \"react\";\r\nimport { authService } from \"fbase\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faTwitter,\r\n  faGoogle,\r\n  faGithub,\r\n} from \"@fortawesome/free-brands-svg-icons\";\r\nimport {\r\n  GithubAuthProvider,\r\n  GoogleAuthProvider,\r\n  signInWithPopup,\r\n} from \"@firebase/auth\";\r\nimport AuthForm from \"components/AuthForm\";\r\n\r\nconst Auth = () => {\r\n  const onSocialClick = async (event) => {\r\n    const {\r\n      target: { name },\r\n    } = event;\r\n    let provider;\r\n    if (name === \"google\") {\r\n      provider = new GoogleAuthProvider(); //팝업으로 google 계정으로 로그인\r\n    } else if (name === \"github\") {\r\n      provider = new GithubAuthProvider(); //팝업으로 github 계정으로 로그인\r\n    }\r\n    await signInWithPopup(authService, provider);\r\n  };\r\n  return (\r\n    <div className=\"authContainer\">\r\n      <FontAwesomeIcon\r\n        icon={faTwitter}\r\n        color={\"#04AAFF\"}\r\n        size=\"3x\"\r\n        style={{ marginBottom: 30 }}\r\n      />\r\n      <AuthForm />\r\n      <div className=\"authBtns\">\r\n        <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\r\n          Continue with Google <FontAwesomeIcon icon={faGoogle} />\r\n        </button>\r\n        <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\r\n          Continue with Github <FontAwesomeIcon icon={faGithub} />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Auth;\r\n","import { dbService, storageService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Nweet = ({ nweetObj, isOwner }) => {\r\n  const [editing, setEditing] = useState(false); // true or false로 editing모드인지 알려줌\r\n  const [newNweet, setNewNweet] = useState(nweetObj.text); //input에 입력된 text를 업데이트\r\n  const onDeleteClick = async () => {\r\n    const ok = window.confirm(\"Are you sure you want to delete this nweet?\");\r\n    if (ok) {\r\n      //delete nweet\r\n      await dbService.doc(`nweets/${nweetObj.id}`).delete();\r\n      await storageService.refFomURL(nweetObj.attachmentUrl).delete();\r\n    }\r\n  };\r\n  const toggleEditing = () => setEditing((prev) => !prev);\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    console.log(nweetObj, newNweet);\r\n    await dbService.doc(`nweets/${nweetObj.id}`).update({\r\n      text: newNweet, //newNweet은 input에 있는 text다.\r\n    });\r\n    setEditing(false); //Editing 모드를 종료해 준다.\r\n  };\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewNweet(value);\r\n  };\r\n  return (\r\n    <div className=\"nweet\">\r\n      {editing ? (\r\n        <>\r\n          <form onSubmit={onSubmit} className=\"container nweetEdit\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Edit your nweet\"\r\n              value={newNweet}\r\n              required\r\n              autoFocus\r\n              onChange={onChange}\r\n              className=\"formInput\"\r\n            />\r\n            <input type=\"submit\" value=\"Update Nweet\" className=\"formBtn\" />\r\n          </form>\r\n          <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\r\n            Cancel\r\n          </span>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <h4>{nweetObj.text}</h4>\r\n          {nweetObj.attachmentUrl && <img src={nweetObj.attachmentUrl} />}\r\n          {isOwner && (\r\n            <div class=\"nweet__actions\">\r\n              <span onClick={onDeleteClick}>\r\n                <FontAwesomeIcon icon={faTrash} />\r\n              </span>\r\n              <span onClick={toggleEditing}>\r\n                <FontAwesomeIcon icon={faPencilAlt} />\r\n              </span>\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n//내가 isOwner 일 때만 이 버튼 fragment들을 볼 수 있다.\r\nexport default Nweet;\r\n","//////Nweets 생성을 담당//////\r\nimport React, { useState } from \"react\";\r\nimport { dbService, storageService } from \"fbase\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { ref, uploadString } from \"@firebase/storage\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst NweetFactory = ({ userObj }) => {\r\n  const [nweet, setNweet] = useState(\"\"); //form을 위한 state이다.\r\n  const [attachment, setAttachment] = useState(\"\");\r\n  const onSubmit = async (e) => {\r\n    if (nweet === \"\") {\r\n      return;\r\n    }\r\n    e.preventDefault();\r\n    let attachmentUrl = \"\";\r\n    if (attachment !== \"\") {\r\n      const attachmentRef = ref(storageService, `${userObj.uid}/${uuidv4()}`); //npm i uuid는 어떤 특별한 식별자를 랜덤으로 생성해준다.\r\n      const response = await uploadString(\r\n        attachmentRef,\r\n        attachment,\r\n        \"data_url\"\r\n      );\r\n      attachmentUrl = await response.ref.getDownloadURL();\r\n    }\r\n    const nweetObj = {\r\n      text: nweet,\r\n      createdAt: Date.now(),\r\n      creatorId: userObj.uid,\r\n      attachmentUrl,\r\n    };\r\n    await dbService.collection(\"nweets\").add(nweetObj);\r\n    setNweet(\"\");\r\n    setAttachment(\"\");\r\n  };\r\n  // try {\r\n  //   const docRef = await addDoc(collection(dbService, \"nweets\"), {\r\n  //     //pormise를 return하기 대문에 async함수를 사용\r\n  //     text: nweet,\r\n  //     createdAt: Date.now(),\r\n  //     creatorId: userObj.uid,\r\n  //   });\r\n  //   console.log(\"Document written with ID: \", docRef.id);\r\n  // } catch (error) {\r\n  //   console.error(\"Error adding document: \", error);\r\n  // }\r\n\r\n  // setNweet(\"\");\r\n  const onChange = ({ target: { value } }) => {\r\n    setNweet(value);\r\n  };\r\n  const onFileChange = (event) => {\r\n    const {\r\n      target: { files },\r\n    } = event; //event안에서 target 안으로 가서 파일을 받아 오는 것이다.\r\n    const theFile = files[0];\r\n    const reader = new FileReader();\r\n    reader.onloadend = (finishedEvent) => {\r\n      //onloaded에 finishedEvent의 result를 setAttachment로 설정해줌\r\n      console.log(finishedEvent);\r\n      const {\r\n        currentTarget: { result },\r\n      } = finishedEvent;\r\n      setAttachment(result);\r\n    };\r\n    reader.readAsDataURL(theFile); //readAsDataURL을 사용해서 파일을 읽는다.\r\n  };\r\n  const onClearAttachment = () => {\r\n    setAttachment(\"\");\r\n  }; //올린 사진을 없앤다.\r\n\r\n  return (\r\n    <form onSubmit={onSubmit} className=\"factoryForm\">\r\n      <div className=\"factoryInput__container\">\r\n        <input\r\n          className=\"factoryInput__input\"\r\n          value={nweet}\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          placeholder=\"What's on your mind?\"\r\n          maxLength={120}\r\n        />\r\n        <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\r\n      </div>\r\n      <label for=\"attach-file\" className=\"factoryInput__label\">\r\n        <span>Add photos</span>\r\n        <FontAwesomeIcon icon={faPlus} />\r\n      </label>\r\n      <input\r\n        id=\"attach-file\"\r\n        type=\"file\"\r\n        accept=\"image/*\"\r\n        onChange={onFileChange}\r\n        style={{\r\n          opacity: 0,\r\n        }}\r\n      />\r\n      {attachment && (\r\n        <div className=\"factoryForm__attachment\">\r\n          <img\r\n            src={attachment}\r\n            style={{\r\n              backgroundImage: attachment,\r\n            }}\r\n          />\r\n          <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\r\n            <span>Remove</span>\r\n            <FontAwesomeIcon icon={faTimes} />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default NweetFactory;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  collection,\r\n  getFirestore,\r\n  onSnapshot,\r\n  orderBy,\r\n  query,\r\n} from \"firebase/firestore\";\r\nimport Nweet from \"components/Nweet\";\r\nimport NweetFactory from \"components/NweetFactory\";\r\n\r\nconst Home = ({ userObj }) => {\r\n  const [nweets, setNweets] = useState([]);\r\n\r\n  // useEffect(() => {\r\n  //   dbService.collection(\"nweets\").onSnapshot((snapshot) => {\r\n  //     const nweetArray = snapshot.docs.map((doc) => ({\r\n  //       id: doc.id,\r\n  //       ...doc.data(),\r\n  //     }));\r\n  //     setNweets(nweetArray);\r\n  //   });\r\n  // }, []); 이전 방식이다.\r\n\r\n  useEffect(() => {\r\n    // 실시간으로 데이터를 데이터베이스에서 가져오기\r\n\r\n    const q = query(\r\n      collection(getFirestore(), \"tweets\"),\r\n      // where('text', '==', 'hehe') // where뿐만아니라 각종 조건 이 영역에 때려부우면 됨\r\n      orderBy(\"createdAt\")\r\n    );\r\n    const unsubscribe = onSnapshot(q, (querySnapshot) => {\r\n      const newArray = querySnapshot.docs.map((doc) => {\r\n        //Snapshot은 기본적으로 데이터베이스에 무슨일이 있을경우 알림을 받는다.\r\n        return {\r\n          id: doc.id,\r\n          ...doc.data(),\r\n        };\r\n      });\r\n      setNweets(newArray);\r\n      console.log(\"Current tweets in CA: \", newArray);\r\n    });\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <NweetFactory userObj={userObj} />\r\n      <div style={{ marginTop: 30 }}>\r\n        {nweets.map((nweet) => (\r\n          <Nweet\r\n            key={nweet.id}\r\n            nweetObj={nweet}\r\n            isOwner={nweet.createId === userObj.uid}\r\n          /> //App.js로 부터 userObj를 받고 있기 때문에 누가 로그인 했는지 알수 있다.\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { authService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { signOut, updateProfile } from \"@firebase/auth\";\r\n\r\nexport default ({ refreshUser, userObj }) => {\r\n  const navigate = useNavigate();\r\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n  const onLogOutClick = () => {\r\n    signOut(authService);\r\n    navigate.push(\"/\"); //navigate를 사용해서 로그아웃된 후 다시 home 으로 돌아갈 수 있게한다.\r\n  };\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewDisplayName(value);\r\n  };\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (userObj.displayName !== newDisplayName) {\r\n      //Profile name 업데이트\r\n      await updateProfile(userObj, { displayName: newDisplayName });\r\n      refreshUser();\r\n    }\r\n  };\r\n  //이전에 사용하는 코드\r\n  // const getMyNweets = async () => {\r\n  //   const nweets = await dbService\r\n  //     .collection(\"nweets\")\r\n  //     .where(\"creatorId\", \"==\", userObj.uid)\r\n  //     .orderBy(\"createdAt\")\r\n  //     .get();\r\n  //   console.log(nweets.map((doc) => doc.data()));\r\n  // };\r\n  return (\r\n    <div className=\"container\">\r\n      <form onSubmit={onSubmit} className=\"profileForm\">\r\n        <input\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          autoFocus\r\n          placeholder=\"Display name\"\r\n          value={newDisplayName}\r\n          className=\"formInput\"\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          value=\"Update Profile\"\r\n          className=\"formBtn\"\r\n          style={{\r\n            marginTop: 10,\r\n          }}\r\n        />\r\n      </form>\r\n      <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\r\n        Log Out\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Navigation = ({ userObj }) => (\r\n  <nav>\r\n    <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\r\n      <li>\r\n        <Link to=\"/\" style={{ marginRight: 10 }}>\r\n          <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\r\n        </Link>\r\n      </li>\r\n      <li>\r\n        <Link\r\n          to=\"/profile\"\r\n          style={{\r\n            marginLeft: 10,\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"center\",\r\n            fontSize: 12,\r\n          }}\r\n        >\r\n          <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\r\n          <span style={{ marginTop: 10 }}>\r\n            {userObj.displayName\r\n              ? `${userObj.displayName}의 Profile`\r\n              : \"Profile\"}\r\n          </span>\r\n        </Link>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n);\r\nexport default Navigation;\r\n","import React from \"react\";\r\nimport { HashRouter as Router, Route, Routes } from \"react-router-dom\";\r\nimport Auth from \"routes/Auth\";\r\nimport Home from \"routes/Home\";\r\nimport Profile from \"routes/Profile\";\r\nimport Navigation from \"components/Navigation\";\r\n\r\nconst AppRouter = ({ refreshUser, isLoggedIn, userObj }) => {\r\n  return (\r\n    <Router>\r\n      {isLoggedIn && <Navigation userObj={userObj} />}\r\n      <div\r\n        style={{\r\n          maxWidth: 890,\r\n          width: \"100%\",\r\n          margin: \"0 auto\",\r\n          marginTop: 80,\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        <Routes>\r\n          {isLoggedIn ? (\r\n            <>\r\n              <Route path=\"/\" element={<Home userObj={userObj} />} />\r\n              <Route\r\n                path=\"/profile\"\r\n                element={\r\n                  <Profile userObj={userObj} refreshUser={refreshUser} />\r\n                }\r\n              />\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Route path=\"/\" element={<Auth />} />\r\n            </>\r\n          )}\r\n        </Routes>\r\n      </div>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default AppRouter;\r\n","import React, { useState, useEffect } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"fbase\";\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      //onAuthStateChanged는 로그인, 로그아웃 할 때 일어난다. 어플리케이션이 초기화 될 때 발생한다.\n      if (user) {\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      } else {\n        setUserObj(null); //로그아웃 기능\n      }\n      setInit(true);\n    });\n  }, []);\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    //user를 새로고침하는 기능\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n  };\n  return (\n    <>\n      {init ? (\n        <AppRouter\n          refreshUser={refreshUser}\n          isLoggedIn={Boolean(userObj)}\n          userObj={userObj}\n        />\n      ) : (\n        \"Initializing....\"\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}